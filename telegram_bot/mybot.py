import asyncio
import os
import random
from datetime import datetime
from typing import Optional, Tuple, List
import logging

import aiohttp
from aiogram import Bot, Dispatcher
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command, CommandObject
from dotenv import load_dotenv


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

POLITICAL_KEYWORDS = {
    '–ø–æ–ª–∏—Ç–∏–∫', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–ø–∞—Ä–ª–∞–º–µ–Ω—Ç', '–≤—ã–±–æ—Ä—ã', '–≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ',
    '–ø–∞—Ä—Ç–∏—è', '—Ä–µ–≤–æ–ª—é—Ü–∏—è', '–≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π', '–≤–ª–∞—Å—Ç—å', '–º–∏–Ω–∏—Å—Ç—Ä', '–¥–µ–ø—É—Ç–∞—Ç',
    '–∑–∞–∫–æ–Ω', '–∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è', '—Å–∞–Ω–∫—Ü–∏–∏', '–ø—Ä–æ—Ç–µ—Å—Ç', '–º–∏—Ç–∏–Ω–≥', '–æ–ø–ø–æ–∑–∏—Ü–∏—è',
    '–ø–µ—Ä–µ–≤–æ—Ä–æ—Ç', '–∏–º–ø–∏—á–º–µ–Ω—Ç', '–∏–Ω–∞—É–≥—É—Ä–∞—Ü–∏—è', '—Å–∞–º–º–∏—Ç', '–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è', '—Ä–µ—Ñ–µ—Ä–µ–Ω–¥—É–º'
}

load_dotenv("secret.env")
TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

MONTH = {
    1: "—è–Ω–≤–∞—Ä—è", 2: "—Ñ–µ–≤—Ä–∞–ª—è", 3: "–º–∞—Ä—Ç–∞", 4: "–∞–ø—Ä–µ–ª—è", 5: "–º–∞—è", 6: "–∏—é–Ω—è",
    7: "–∏—é–ª—è", 8: "–∞–≤–≥—É—Å—Ç–∞", 9: "—Å–µ–Ω—Ç—è–±—Ä—è", 10: "–æ–∫—Ç—è–±—Ä—è", 11: "–Ω–æ—è–±—Ä—è", 12: "–¥–µ–∫–∞–±—Ä—è"
}

API = "https://ru.wikipedia.org/api/rest_v1/feed/onthisday"
REQUEST_TIMEOUT = 10
MAX_ATTEMPTS = 30
CURRENT_YEAR = datetime.now().year

HELP_TEXT = """
<b>–ö–æ–º–∞–Ω–¥—ã Historius:</b>
/today ‚Äî —Å–æ–±—ã—Ç–∏—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
/holidays ‚Äî –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è
/random ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è –¥–∞—Ç–∞ –∏ —Å–æ–±—ã—Ç–∏
/year &lt;–≥–æ–¥&gt; ‚Äî 5 —Å–æ–±—ã—Ç–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –≥–æ–¥–∞
"""


def is_political(text: str) -> bool:
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in POLITICAL_KEYWORDS)


async def fetch_json(url: str):
    try:
        timeout = aiohttp.ClientTimeout(total=REQUEST_TIMEOUT)
        async with aiohttp.ClientSession(timeout=timeout) as s:
            async with s.get(url) as r:
                if r.status == 200:
                    return await r.json()
                logger.error(f"API request failed: {r.status} {await r.text()}")
                return None
    except Exception as e:
        logger.error(f"Error fetching {url}: {e}")
        return None


async def get_event(m: int, d: int) -> Optional[Tuple[str, str]]:
    data = await fetch_json(f"{API}/events/{m}/{d}")
    if not data:
        return None

    events = data.get("events", [])
    if not events:
        return None


    non_political_events = [ev for ev in events if not is_political(ev.get("text", ""))]

    if not non_political_events:
        return None

    ev = random.choice(non_political_events)
    return ev.get("year", "???"), ev.get("text", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è.")


async def get_holidays(m: int, d: int) -> List[str]:
    data = await fetch_json(f"{API}/holidays/{m}/{d}")
    if not data:
        return []
    return [h["text"] for h in data.get("holidays", [])]


async def get_year_events(year: int, limit: int = 5) -> List[str]:
    events: List[str] = []
    tried_dates = set()
    attempts = 0

    while len(events) < limit and attempts < MAX_ATTEMPTS:
        attempts += 1
        m = random.randint(1, 12)
        d = random.randint(1, 31)

        if m == 2 and d > 28:
            d = 28

        if (m, d) in tried_dates:
            continue

        tried_dates.add((m, d))

        try:
            data = await fetch_json(f"{API}/events/{m}/{d}")
            if not data:
                continue

            for ev in data.get("events", []):
                if str(ev.get("year", "")) == str(year):
                    text = ev.get("text", "").strip()
                    if text and not is_political(text):
                        events.append(text)
                        if len(events) >= limit:
                            return events
        except Exception as e:
            logger.error(f"Error processing date {m}/{d}: {e}")
            continue

    return events


def fmt_date(d: int, m: int, y: str | int):
    return f"{d} {MONTH[m]} {y}"


async def today_msg():
    now = datetime.now()
    ev = await get_event(now.month, now.day)
    if not ev:
        return "ü§∑‚Äç –°–µ–≥–æ–¥–Ω—è —Å–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞—à—ë–ª."
    y, text = ev
    return f"{fmt_date(now.day, now.month, y)}\n\n{text}"


async def random_msg():
    m = random.randint(1, 12)
    d = random.randint(1, 31)
    if m == 2 and d > 28:
        d = 28

    ev = await get_event(m, d)
    if not ev:
        return "ü§∑‚Äç –í —ç—Ç–æ—Ç –¥–µ–Ω—å –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
    y, text = ev
    return f"{fmt_date(d, m, y)}\n\n{text}"


async def holidays_msg():
    now = datetime.now()
    hol = await get_holidays(now.month, now.day)
    if not hol:
        return "üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    random.shuffle(hol)
    sel = hol[:3]
    title = f"üéâ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏ ‚Äî {now.day} {MONTH[now.month]}"
    return title + "\n\n" + "\n".join(f"‚Äî {h}" for h in sel)


@dp.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø Historius ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç –≤—Å–µ –¥–∞—Ç—ã. "
        "–ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
    )


@dp.message(Command("help"))
async def cmd_help(m: Message):
    await m.answer(HELP_TEXT)


@dp.message(Command("year"))
async def cmd_year(m: Message, command: CommandObject):
    if not command.args or not command.args.isdigit():
        await m.answer("–ò—Å–ø–æ–ª—å–∑—É–π /year &lt;–≥–æ–¥&gt;, –Ω–∞–ø—Ä–∏–º–µ—Ä /year 1812")
        return

    year = int(command.args)

    if year < 1 or year > CURRENT_YEAR:
        await m.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ–¥ –æ—Ç 1 –¥–æ {CURRENT_YEAR}.")
        return

    if year == 2022:
        await m.answer("2022 –≥–æ–¥ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return

    if year > 2021:
        await m.answer("–ü–æ–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≥–æ–¥–∞ –¥–æ 2021 –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ.")
        return

    msg = await m.answer(f"üîç –ò—â—É —Å–æ–±—ã—Ç–∏—è {year} –≥–æ–¥–∞...")

    try:
        evs = await get_year_events(year)
        if not evs:
            await msg.edit_text(f"ü§∑‚Äç –ó–∞ {year} –≥–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π.")
            return

        result = f"üìú –°–æ–±—ã—Ç–∏—è {year} –≥–æ–¥–∞\n\n" + "\n".join(f"‚Ä¢ {e}" for e in evs)
        await msg.edit_text(result)
    except Exception as e:
        logger.error(f"Error in /year command: {e}")
        await msg.edit_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–æ–±—ã—Ç–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@dp.message(Command("today"))
async def cmd_today(m: Message):
    try:
        await m.answer(await today_msg())
    except Exception as e:
        logger.error(f"Error in /today command: {e}")
        await m.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")


@dp.message(Command("holidays"))
async def cmd_holidays(m: Message):
    try:
        await m.answer(await holidays_msg())
    except Exception as e:
        logger.error(f"Error in /holidays command: {e}")
        await m.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∞–∑–¥–Ω–∏–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")


@dp.message(Command("random"))
async def cmd_random(m: Message):
    try:
        await m.answer(await random_msg())
    except Exception as e:
        logger.error(f"Error in /random command: {e}")
        await m.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())